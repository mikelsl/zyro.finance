scilla_version 0

import BoolUtils

library ZProtoImpl

let one = Uint128 1
let zero = Uint128 0
let ten_e_six = Uint128 1000000
let zero_address = 0x0000000000000000000000000000000000000000
let gzil_address = 0xa845c1034cd077bd8d32be0447239c7e4be6cb21
let zil_deadline = BNum 500000000
let factor_one = Uint128 101
let percent = Uint128 100

let failure_label = "LiquidityManagerFailure"
let caller_not_router = "ShouldCalledByRouter"
let expired_label = "TimeExpired"
let no_market = "TokenMarketIsNotExists"
let t_r_n_zero_label = "TokenReserveMustNotZero"
let z_r_n_zero_label = "ZilReserveMustNotZero"
let from_token_contract_callback = "TransferSuccessCallbackMustFromTokenCantract"
let lt_min_want_zil = "LowerThanMinZilUserWantBought"
let gt_max_sold_token = "GreaterThanMaxTokenUserWantToPay"
let lt_min_want_token = "LowerThanMinTokenUserWantBought"
let gt_max_sold_zil = "GreaterThanMaxZilUserWantToPay"

let order_not_met_code = Uint32 5
let private_function_called_code = Uint32 7

(* Error events *)
type Error =
  | CodeIsGZIL

let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeIsGZIL => Int32 -5
      end
    in
    { _exception : "Error"; code : result_code }

let any_zero_double =
    fun (first : Uint128) =>
    fun (second : Uint128) =>
        let f_zero = builtin eq first zero in
        let s_zero = builtin eq second zero in
        orb f_zero s_zero

let any_zero_triple =
    fun (first : Uint128) =>
    fun (second : Uint128) =>
    fun (third : Uint128) =>
        let fs_zero = any_zero_double first second in
        let t_zero = builtin eq third zero in
        orb fs_zero t_zero

let ble =
    fun (b1 : BNum ) =>
    fun (b2 : BNum ) =>
        let b1_lt = builtin blt b1 b2 in
        let b_eq = builtin eq b1 b2 in
        orb b1_lt b_eq

(* Modified from ZDex *)
let one_msg =
    fun (msg : Message) =>
        let nil_msg = Nil {Message} in
        Cons {Message} msg nil_msg

let two_msgs =
    fun (msg1 : Message) =>
    fun (msg2 : Message) =>
        let msgs_tmp = one_msg msg2 in
        Cons {Message} msg1 msgs_tmp
        
let three_msgs =
    fun (msg1 : Message) =>
    fun (msg2 : Message) =>
    fun (msg3 : Message) =>
        let msgs_tmp = two_msgs msg2 msg3 in
        Cons {Message} msg1 msgs_tmp
    
let le_int =
  fun (a : Uint128) => fun (b : Uint128) =>
    let x = builtin lt a b in
    match x with
    | True => True
    | False =>
      builtin eq a b
    end

let min_int = 
    fun (a : Uint128) => fun (b : Uint128) =>
    let ismin = le_int a b in
    match ismin with
        | True => a
        | False => b
    end
    
let get_var_value =
    fun( var : Option Uint128) =>
      match var with
      | Some x => x
      | None => Uint128 0
      end

let get_zil_value =       
    fun( deadline : BNum) =>
    fun( zil_sold : Uint128) =>
    fun( token_sold : Uint128) =>
    fun( t_r : Uint128) =>
    fun( zil_reserve : Uint128) =>
        let exact_zil = builtin eq deadline zil_deadline in
        match exact_zil with
        | False =>
            let amount_t_r = builtin mul token_sold zil_reserve in
            let amount_tr_zr = builtin div amount_t_r t_r in
            let zil_amount = builtin add amount_tr_zr one in
            zil_amount
        | True =>
            zil_sold
        end

let get_token_value =       
    fun( deadline : BNum) =>
    fun( zil_sold : Uint128) =>
    fun( token_sold : Uint128) =>
    fun( t_r : Uint128) =>
    fun( zil_reserve : Uint128) =>
        let exact_zil = builtin eq deadline zil_deadline in
        match exact_zil with
        | True =>
            let amount_t_r = builtin mul zil_sold t_r in
            let amount_tr_zr = builtin div amount_t_r zil_reserve in
            let token_amount = builtin add amount_tr_zr one in
            token_amount
        | False =>
            token_sold
        end

contract ZProtoImpl
(hub : ByStr20)

(* Pending tx params *)
field liquidity_mint_pending : Uint128 = zero
field liquidity_burn_pending : Uint128 = zero
field total_supply_pending : Uint128 = zero
field sender_balance_pending : Uint128 = zero
field token_reserve_pending : Uint128 = zero
field sender_pending : ByStr20 = zero_address
field token_pending : ByStr20 = zero_address
field lpt_pending : ByStr20 = zero_address
field zil_sold_pending : Uint128 = zero
field zil_bought_pending : Uint128 = zero
field balance_pending : Uint128 = zero

(* What function is currently pending? *)
field fx_pending : Uint128 = zero

procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure require( condition: Bool, message: String)
    match condition with 
    | True => 
    | False => 
        e = { _exception : message }; 
        throw e 
    end
end

procedure require_not( condition: Bool, message: String)
    match condition with 
    | False => 
    | True => 
        e = { _exception : message }; 
        throw e 
    end
end

procedure require_value( var: Option Uint128, message: String)
    match var with 
    | Some x => 
    | None => 
        e = { _exception : message }; 
        throw e 
    end
end

procedure IsNotGZIL(address: ByStr20)
  is_gzil = builtin eq gzil_address address;
  match is_gzil with
  | True =>
    err = CodeIsGZIL;
    ThrowError err
  | False =>
  end
end

(* Logic for AddLiquidity *)
transition AddLiquidityCore (token : ByStr20, min_liquidity : Uint128,
        max_tokens : Uint128, deadline : BNum, total_supply : Option Uint128,
        sender_balance : Option Uint128, token_reserve : Option Uint128,
        balance : Option Uint128, zil_sold : Uint128, sender : ByStr20, lpt_provider : ByStr20)
    (* general check *)
    IsNotGZIL token;
    sender_is_router = builtin eq _sender hub;
    require sender_is_router caller_not_router;
    blocknumber <- & BLOCKNUMBER;
    block_valid = ble blocknumber deadline;
    require block_valid expired_label;

    zs_is_zero = builtin eq zil_sold zero;
    txt = "ZilSoldMustNotZero";
    require_not zs_is_zero txt;

    is_mt_zero = builtin eq max_tokens zero;
    txt = "MaxtokensMustNotZero";
    require_not is_mt_zero txt;
    
    is_ml_zero = builtin eq min_liquidity zero;
    txt = "MinliquidityMustNotZero";
    require_not is_ml_zero txt;

    require_value total_supply no_market;
    t_s = get_var_value total_supply;

    zero_liquidity = builtin eq t_s zero;
    match zero_liquidity with
    |   False =>
        require_value token_reserve no_market;
        t_r = get_var_value token_reserve;

        require_value balance no_market;
        b = get_var_value balance;

        zil_reserve = b;
        token_amount = get_token_value deadline zil_sold max_tokens t_r zil_reserve;
        zil_amount = get_zil_value deadline zil_sold max_tokens t_r zil_reserve;
        
        amount_t_s = builtin mul zil_amount t_s;
        amount_t_s_t = builtin mul token_amount t_s;
        liquidity_minted = builtin div amount_t_s zil_reserve;
        l_m_z = builtin div amount_t_s zil_reserve;
        l_m_t = builtin div amount_t_s_t t_r;
        tmp_max_tokens = builtin mul max_tokens factor_one;
        adjust_max_tokens = builtin div tmp_max_tokens percent;
        enough_tokens = le_int token_amount adjust_max_tokens;
        txt =  "no enough_tokens";
        token_amount_str = builtin to_string token_amount;
        error = builtin concat txt token_amount_str;
        require enough_tokens error;

        enough_liquidity = le_int min_liquidity liquidity_minted;
        txt =  "no enough_liquidity";
        require enough_liquidity txt;

        total_supply_new = builtin add t_s liquidity_minted;
        total_supply_pending := total_supply_new;
        sender_pending := sender;
        token_pending := token;
        lpt_pending := lpt_provider;
        l_m_p = min_int l_m_z l_m_t;
        liquidity_mint_pending := l_m_p;
        zil_sold_pending := zil_sold;
        token_reserve_new = builtin add t_r max_tokens;
        token_reserve_pending := token_reserve_new;
        balance_new = builtin add b zil_sold;
        balance_pending := balance_new;
        match sender_balance with
        | Some s_b =>
            sender_balance_new = builtin add s_b liquidity_minted;
            sender_balance_pending := sender_balance_new;
            msg1 = { _tag : "TransferFrom"; _recipient : token; _amount : zero;
                    from : sender; to : hub; amount : token_amount};
            msg2 = { _tag : "Mint"; _recipient : lpt_provider; _amount : zero;
                    recipient : sender; amount : l_m_p};
            msgs = two_msgs msg1 msg2;
            send msgs
        |   None =>
            sender_balance_pending := liquidity_minted;
            msg1 = { _tag : "TransferFrom"; _recipient : token; _amount : zero;
                    from : sender; to : hub; amount : token_amount};
            msg2 = { _tag : "Mint"; _recipient : lpt_provider; _amount : zero;
                    recipient : sender; amount : l_m_p};
            msgs = two_msgs msg1 msg2;
            send msgs
        end
    |   True =>
        txt = "NoZilReserv";
        require_value balance txt;
        b = get_var_value balance;
        enough_sold = le_int ten_e_six zil_sold;
        txt =  "NoEnoughSold";   
        require enough_sold txt;
        sender_pending := sender;
        token_pending := token;
        zil_sold_pending := zil_sold;
        token_reserve_pending := max_tokens;
        balance_new = builtin add b zil_sold;
        balance_pending := balance_new;
        amount_z_t = builtin mul zil_sold max_tokens;
        amount_z_t_sq = builtin isqrt amount_z_t;
        l_m_p = builtin sub amount_z_t_sq min_liquidity;
        liquidity_mint_pending := l_m_p;
        total_supply_pending := l_m_p;
        sender_balance_pending := l_m_p;
        msg1 = { _tag : "TransferFrom"; _recipient : token; _amount : zero;
                from : sender; to : hub; amount : max_tokens };
        msg2 = { _tag : "Mint"; _recipient : lpt_provider; _amount : zero;
                recipient : sender; amount : l_m_p};
        msgs = two_msgs msg1 msg2;
        send msgs
    end
end

transition RemoveLiquidityCore (token : ByStr20, amount : Uint128, min_zil : Uint128,
        min_tokens : Uint128, deadline : BNum, recipient : ByStr20,
        total_supply : Option Uint128, sender_balance : Option Uint128, token_reserve : Option Uint128,
        balance : Option Uint128, sender : ByStr20, lpt_provider : ByStr20)
    (* general check *)
    IsNotGZIL token;
    sender_is_router = builtin eq _sender hub;
    require sender_is_router caller_not_router;
    blocknumber <- & BLOCKNUMBER;
    block_valid = ble blocknumber deadline;
    require block_valid expired_label;

    a_is_zero = builtin eq amount zero;
    txt = "AmountMustNotZero";
    require_not a_is_zero txt;

    is_mz_zero = builtin eq min_zil zero;
    txt = "MinZilMustNotZero";
    require_not is_mz_zero txt;
    
    is_mt_zero = builtin eq min_tokens zero;
    txt = "MinTokenMustNotZero";
    require_not is_mt_zero txt;

    require_value total_supply no_market;
    t_s = get_var_value total_supply;
    t_s_zero = builtin eq t_s zero;
    require_not t_s_zero txt;

    require_value token_reserve no_market;
    t_r = get_var_value token_reserve;

    require_value balance no_market;
    b = get_var_value balance;

    amount_bal = builtin mul amount b;
    zil_amount = builtin div amount_bal t_s;
    amount_t_r = builtin mul amount t_r;
    token_amount = builtin div amount_t_r t_s;
    tmp_zil_amount = builtin mul zil_amount factor_one;
    adjust_zil_amount = builtin div tmp_zil_amount percent;
    tmp_token_amount = builtin mul token_amount factor_one;
    adjust_token_amount = builtin mul tmp_token_amount percent;
    enough_zil = le_int min_zil zil_amount;
    enough_tokens = le_int min_tokens token_amount;
    amount_t_s_t = builtin mul token_amount t_s;
    l_m_t = builtin div amount_t_s_t t_r;

    order_met = andb enough_tokens enough_zil;
    txt =  "order not met ";   
    txtsep = " ";
    token_amount_str = builtin to_string token_amount;
    zil_amount_str = builtin to_string zil_amount;
    error1 = builtin concat txt token_amount_str;    
    error2 = builtin concat error1 txtsep;
    error3 = builtin concat error2 zil_amount_str;
    require order_met error3;

    s_b = get_var_value sender_balance;
    (* require_value sender_balance no_market;
    enough_liquidity = le_int amount s_b;
    txt =  "provide less, require more";   
    require enough_liquidity txt; *)

    sender_pending := sender;
    token_pending := token;
    sender_balance_new = builtin sub s_b zero;
    sender_balance_pending := sender_balance_new;
    total_supply_new = builtin sub t_s amount;
    total_supply_pending := total_supply_new;
    zil_bought_pending := zil_amount;
    token_reserve_new = builtin sub t_r token_amount;
    token_reserve_pending := token_reserve_new;
    balance_new = builtin sub b zil_amount;
    balance_pending := balance_new;
    liquidity_burn_pending := l_m_t;
    msg1 = { _tag : "TransferFrom"; _recipient : token; _amount : zero;
            from : hub; to : recipient; amount : token_amount};
    msg2 = { _tag : "Burn"; _recipient : lpt_provider; _amount : zero;
            burn_account : sender; amount : amount};
    msgs = two_msgs msg1 msg2;
    send msgs
end

(** Response Functions **)
transition TransferFromSuccessCallBack (initiator : ByStr20, sender : ByStr20, recipient : ByStr20, amount : Uint128)
    t_p <- token_pending;
    token_sent = builtin eq t_p _sender;
    match token_sent with
    |   True =>
        s_b_p <- sender_balance_pending;
        t_s_p <- total_supply_pending;
        t_r_p <- token_reserve_pending;
        s_p <- sender_pending;
        t_p <- token_pending;
        z_b_p <- zil_bought_pending;
        b_p <- balance_pending;
        sender_balance_pending := zero;
        total_supply_pending := zero;
        token_reserve_pending := zero;
        (* sender_pending := zero_address; *)
        (* token_pending := zero_address; *)
        zil_sold_pending := zero;
        zil_bought_pending := zero;
        balance_pending := zero;
        msg = { _tag : "LiquidityManagerSuccess"; _recipient : hub; _amount : zero;
                sender : s_p; refund : z_b_p; token : t_p; total_supply_new : t_s_p;
                token_reserve_new : t_r_p;  sender_balance_new : s_b_p; token_zil_balance_new : b_p; token_amount : amount };
        msgs = one_msg msg;
        send msgs
    |   False =>
    end
end

transition TransferFromFailure (sender : ByStr20, recipient : ByStr20, amount : Uint128)
    t_p <- token_pending;
    token_sent = builtin eq t_p _sender;
    match token_sent with
    |   True =>
        s_p <- sender_pending;
        z_s_p <- zil_sold_pending;
        sender_balance_pending := zero;
        total_supply_pending := zero;
        token_reserve_pending := zero;
        (* sender_pending := zero_address; *)
        (* token_pending := zero_address; *)
        zil_sold_pending := zero;
        zil_bought_pending := zero;
        balance_pending := zero;
        msg = { _tag : "ActionFailure"; _recipient : hub; _amount : zero;
                sender : s_p; refund : z_s_p; label : failure_label;
                code : private_function_called_code };
        msgs = one_msg msg;
        send msgs
    |   False =>
        msg = { _tag : "ActionFailure"; _recipient : hub; _amount : zero;
                sender : sender; refund : zero; label : failure_label;
                code : private_function_called_code };
        msgs = one_msg msg;
        send msgs
    end
end

transition MintSuccessCallBack (minter : ByStr20, recipient: ByStr20, amount : Uint128)
    l_p <- lpt_pending;
    token_mint = builtin eq _this_address minter;
    match token_mint with
    | True =>
        t_p <- token_pending;
        msg = { _tag : "MintSuccess"; _recipient : hub; _amount : zero;
                recipient : recipient; token : t_p; lpt_balance_new : amount };
        msgs = one_msg msg;
        send msgs
    | False =>
        msg = { _tag : "ActionFailure"; _recipient : hub; _amount : zero;
                sender : recipient; refund : zero; label : failure_label;
                code : private_function_called_code };
        msgs = one_msg msg;
        send msgs
    end
end

transition BurnSuccessCallBack (burner : ByStr20, burn_account : ByStr20, amount : Uint128)
    l_p <- lpt_pending;
    token_burn = builtin eq _this_address burn_account;
    match token_burn with
    |   True =>
        t_p <- token_pending;
        msg = { _tag : "BurnSuccess"; _recipient : hub; _amount : zero;
                sender : burn_account; token : t_p; lpt_balance_new : amount };
        msgs = one_msg msg;
        send msgs
    |   False =>
        msg = { _tag : "ActionFailure"; _recipient : hub; _amount : zero;
                sender : burn_account; refund : zero; label : failure_label;
                code : private_function_called_code };
        msgs = one_msg msg;
        send msgs
    end
end
