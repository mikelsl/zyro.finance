scilla_version 0

import BoolUtils

library TokenToZil

let one = Uint128 1
let zero = Uint128 0
let zero_address = 0x0000000000000000000000000000000000000000

let fee_ratio_kept = Uint128 997
let fee_ratio_denom = Uint128 1000

let failure_label = "TokenToZilFailure"
let caller_not_router = "ShouldCalledByRouter"
let expired_label = "TimeExpired"
let no_market = "TokenMarketIsNotExists"
let t_r_n_zero_label = "TokenReserveMustNotZero"
let z_r_n_zero_label = "ZilReserveMustNotZero"
let from_token_contract_callback = "TransferSuccessCallbackMustFromTokenCantract"
let lt_min_want_zil = "LowerThanMinZilUserWantBought"
let gt_max_sold_token = "GreaterThanMaxTokenUserWantToPay"
let lt_min_want_token = "LowerThanMinTokenUserWantBought"
let gt_max_sold_zil = "GreaterThanMaxZilUserWantToPay"
let order_not_met_code = Uint32 5

(* returns Uint128 *)
let input_price =
    fun (input_amount : Uint128) =>
    fun (input_reserve : Uint128) =>
    fun (output_reserve : Uint128) =>
        (* assert input_reserve > 0 and output_reserve > 0 *)
        let input_fee_kept = builtin mul input_amount fee_ratio_kept in
        let numerator = builtin mul input_fee_kept output_reserve in
        let input_reserve_denom = builtin mul input_reserve fee_ratio_denom in
        let denominator = builtin add input_reserve_denom input_fee_kept in
        builtin div numerator denominator

(* returns Uint128 *)
let output_price =
    fun (output_amount : Uint128) =>
    fun (input_reserve : Uint128) =>
    fun (output_reserve : Uint128) =>
        (* assert input_reserve > 0 and output_reserve > 0 *)
        let in_res_out_amount = builtin mul input_reserve output_amount in
        let numerator = builtin mul in_res_out_amount fee_ratio_denom in
        let out_res_amount = builtin sub output_reserve output_amount in
        let denominator = builtin mul out_res_amount fee_ratio_kept in
        let ratio = builtin div numerator denominator in
        builtin add ratio one

let ble =
    fun (b1 : BNum ) =>
    fun (b2 : BNum ) =>
        let b1_lt = builtin blt b1 b2 in
        let b_eq = builtin eq b1 b2 in
        orb b1_lt b_eq

(* Modified from ZDex *)
(* returns singleton List Message *)
let one_msg =
    fun (msg : Message) =>
        let nil_msg = Nil {Message} in
        Cons {Message} msg nil_msg

let le_int =
  fun (a : Uint128) => fun (b : Uint128) =>
    let x = builtin lt a b in
    match x with
    | True => True
    | False =>
      builtin eq a b
    end
    
let get_var_value =
  fun( var : Option Uint128) =>
    match var with
    | Some x => x
    | None => Uint128 0
    end

contract TokenToZil
(hub : ByStr20)

field token_reserve_pending : Uint128 = zero
field sender_pending : ByStr20 = zero_address
field token_pending : ByStr20 = zero_address
field zil_sold_pending : Uint128 = zero
field zil_bought_pending : Uint128 = zero
field balance_pending : Uint128 = zero

procedure require( condition: Bool, message: String)
    match condition with 
    | True => 
    | False => 
        e = { _exception : message }; 
        throw e 
    end
end

procedure require_not( condition: Bool, message: String)
    match condition with 
    | False => 
    | True => 
        e = { _exception : message }; 
        throw e 
    end
end

procedure require_value( var: Option Uint128, message: String)
    match var with 
    | Some x => 
    | None => 
        e = { _exception : message }; 
        throw e 
    end
end

(* private *)
(* calls FungibleToken.TransferFrom() *)
(* exact zil amount *)
transition TokenToZilInput (token : ByStr20, tokens_sold : Uint128,
        min_zil : Uint128, deadline : BNum, buyer : ByStr20, recipient : ByStr20,
        token_reserve : Option Uint128, balance : Option Uint128)
    (* general check *)
    sender_is_router = builtin eq _sender hub;
    require sender_is_router caller_not_router;
    blocknumber <- & BLOCKNUMBER;
    block_valid = ble blocknumber deadline;
    require block_valid expired_label;

    (* check token_reserve *)
    require_value token_reserve no_market;
    t_r = get_var_value token_reserve;
    tr_is_zero = builtin eq t_r zero;
    require_not tr_is_zero t_r_n_zero_label;

    (* check tokens sold *)
    ts_is_zero = builtin eq tokens_sold zero;
    txt = "TokensSoldMustNotZero";
    require_not ts_is_zero txt;

    (* check zil reserve *)
    require_value balance no_market;
    b = get_var_value balance;
    b_is_zero = builtin eq b zero;
    require_not b_is_zero z_r_n_zero_label;

    (* check zil bought slippage *)
    zil_bought = input_price tokens_sold t_r b;
    enough_bought = le_int min_zil zil_bought;
    require enough_bought lt_min_want_zil;

    (* send token to router *)
    sender_pending := buyer;
    token_pending := token;
    zil_bought_pending := zil_bought;
    token_reserve_new = builtin add t_r tokens_sold;
    token_reserve_pending := token_reserve_new;
    balance_new = builtin sub b zil_bought;
    balance_pending := balance_new;
    msg = { _tag : "TransferFrom"; _recipient : token; _amount : zero;
            from : buyer; to : hub; tokens : tokens_sold};
    msgs = one_msg msg;
    send msgs
end

(* private *)
(* calls FungibleToken.TransferFrom() *)
(* exact token amount *)
transition TokenToZilOutput (token : ByStr20, zil_bought : Uint128,
        max_tokens : Uint128, deadline : BNum, buyer : ByStr20, recipient : ByStr20,
        token_reserve : Option Uint128, balance : Option Uint128)
    (* general check *)
    sender_is_router = builtin eq _sender hub;
    require sender_is_router caller_not_router;
    blocknumber <- & BLOCKNUMBER;
    block_valid = ble blocknumber deadline;
    require block_valid expired_label;

    (* check token_reserve *)
    require_value token_reserve no_market;
    t_r = get_var_value token_reserve;
    tr_is_zero = builtin eq t_r zero;
    require_not tr_is_zero t_r_n_zero_label;

    (* check zil bought *)
    zb_is_zero = builtin eq zil_bought zero;
    txt = "ZilBoughtMustNotZero";
    require_not zb_is_zero txt;

    (* check zil reserve *)
    require_value balance no_market;
    b = get_var_value balance;

    (* check token sold slippage *)
    tokens_sold = output_price zil_bought t_r b;
    enough_sold = le_int tokens_sold max_tokens;
    require enough_sold gt_max_sold_token;

    (* send token to router *)
    sender_pending := buyer;
    token_pending := token;
    zil_bought_pending := zil_bought;
    token_reserve_new = builtin add t_r tokens_sold;
    token_reserve_pending := token_reserve_new;
    balance_new = builtin sub b zil_bought;
    balance_pending := balance_new;
    msg = { _tag : "TransferFrom"; _recipient : token; _amount : zero;
            from : buyer; to : hub; tokens : tokens_sold};
    msgs = one_msg msg;
    send msgs
end

(* private *)
(* calls FungibleToken.TransferFrom() *)
(* exact token amount *)
transition ZilToTokenInput (token : ByStr20, zil_sold : Uint128, min_tokens : Uint128,
    deadline : BNum, buyer : ByStr20, recipient : ByStr20,
    token_reserve : Option Uint128, balance : Option Uint128)
    (* general check *)
    sender_is_router = builtin eq _sender hub;
    require sender_is_router caller_not_router;
    blocknumber <- & BLOCKNUMBER;
    block_valid = ble blocknumber deadline;
    require block_valid expired_label;

    (* check token_reserve *)
    require_value token_reserve no_market;
    t_r = get_var_value token_reserve;
    tr_is_zero = builtin eq t_r zero;
    require_not tr_is_zero t_r_n_zero_label;

    (* check zil reserve *)
    require_value balance no_market;
    b = get_var_value balance;
    b_is_zero = builtin eq b zero;
    require_not b_is_zero z_r_n_zero_label;

    (* check zil sold *)
    zs_is_zero = builtin eq zil_sold zero;
    txt = "ZilSoldMustNotZero";
    require_not zs_is_zero txt;
    bal_subbed = builtin sub b zil_sold;
    b_s_zero = builtin eq bal_subbed zero;
    txt = "BalanceNotEnough";
    require_not b_s_zero txt;

    (* check token bought slippage. use subbed zil to calc price??? *)
    tokens_bought = input_price zil_sold bal_subbed t_r;
    enough_bought = le_int min_tokens tokens_bought;
    require enough_bought lt_min_want_token;

    (* send token from router to buyer *)
    sender_pending := buyer;
    token_pending := token;
    zil_sold_pending := zil_sold;
    token_reserve_new = builtin sub t_r tokens_bought;
    token_reserve_pending := token_reserve_new;
    balance_new = builtin add b zil_sold;
    balance_pending := balance_new;
    msg = { _tag : "TransferFrom"; _recipient : token; _amount : zero;
            from : hub; to : recipient; tokens : tokens_bought};
    msgs = one_msg msg;
    send msgs
end

(* private *)
(* calls FungibleToken.TransferFrom() *)
(* exact zil amount *)
transition ZilToTokenOutput (token : ByStr20, tokens_bought : Uint128, max_zil : Uint128,
    deadline : BNum, buyer : ByStr20, recipient : ByStr20,
    token_reserve : Option Uint128, balance : Option Uint128)
    (* general check *)
    sender_is_router = builtin eq _sender hub;
    require sender_is_router caller_not_router;
    blocknumber <- & BLOCKNUMBER;
    block_valid = ble blocknumber deadline;
    require block_valid expired_label;

    (* check token_reserve *)
    require_value token_reserve no_market;
    t_r = get_var_value token_reserve;
    tr_is_zero = builtin eq t_r zero;
    require_not tr_is_zero t_r_n_zero_label;

    (* check zil reserve *)
    require_value balance no_market;
    b = get_var_value balance;

    (* check tokens sold *)
    tb_is_zero = builtin eq tokens_bought zero;
    txt = "TokensBoughtMustNotZero";
    require_not tb_is_zero txt;

    (* check tokens sold *)
    mzil_is_zero = builtin eq max_zil zero;
    txt = "MaxZilNotZero";
    require_not mzil_is_zero txt;

    (* send token from router to buyer *)
    bal_subbed = builtin sub b max_zil;
    zil_sold = output_price tokens_bought max_zil t_r;
    zil_refund = builtin sub max_zil zil_sold;
    sender_pending := buyer;
    token_pending := token;
    zil_bought_pending := zil_refund;
    zil_sold_pending := max_zil;
    token_reserve_new = builtin sub t_r tokens_bought;
    token_reserve_pending := token_reserve_new;
    balance_new = builtin add b zil_sold;
    balance_pending := balance_new;
    msg = { _tag : "TransferFrom"; _recipient : token; _amount : zero;
            from : hub; to : recipient; tokens : tokens_bought};
    msgs = one_msg msg;
    send msgs
end

(* Token Contract callback function, for sending zil to buyer *)
transition TransferFromSuccessCallBack (sender : ByStr20, recipient : ByStr20, amount : Uint128)
    t_p <- token_pending;
    token_sent = builtin eq t_p _sender;
    require token_sent from_token_contract_callback;
    t_r_p <- token_reserve_pending;
    s_p <- sender_pending;
    t_p <- token_pending;
    z_b_p <- zil_bought_pending;
    b_p <- balance_pending;
    token_reserve_pending := zero;
    sender_pending := zero_address;
    token_pending := zero_address;
    zil_sold_pending := zero;
    zil_bought_pending := zero;
    balance_pending := zero;
    msg = { _tag : "TradeSuccess"; _recipient : hub; _amount : zero;
            sender : s_p; refund : z_b_p; token : t_p;
            token_zil_balance_new : b_p; token_reserve_new : t_r_p };
    msgs = one_msg msg;
    send msgs
end

transition TransferFromFailure (sender : ByStr20, recipient : ByStr20, amount : Uint128)
    t_p <- token_pending;
    token_sent = builtin eq t_p _sender;
    require token_sent from_token_contract_callback;
    s_p <- sender_pending;
    z_s_p <- zil_sold_pending;
    token_reserve_pending := zero;
    sender_pending := zero_address;
    token_pending := zero_address;
    zil_sold_pending := zero;
    zil_bought_pending := zero;
    balance_pending := zero;
    msg = { _tag : "ActionFailure"; _recipient : hub; _amount : zero;
            sender : s_p; refund : z_s_p; label : failure_label;
            code : order_not_met_code };
    msgs = one_msg msg;
    send msgs
end
